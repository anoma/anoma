module trivial_resource_logic;

import Stdlib.Prelude open;
import Stdlib.Cairo.Ec as Ec;
import Stdlib.Cairo.Poseidon open;
import Stdlib.Cairo.Pedersen open;

-- PRF_EXPAND_PERSONALIZATION_FELT is from cairo_prover/src/lib.rs/PRF_EXPAND_PERSONALIZATION_FELT
PRF_EXPAND_PERSONALIZATION_FELT : Field :=
  89564067232354163924078705540990330212;

type Resource :=
  mkResource@{
    logic_ref : Field;
    label_ref : Field;
    quantity : Field;
    value_ref : Field;
    is_ephemeral : Bool;
    nonce : Field;
    nk_commitment : Field;
    rand_seed : Field;
  };

type LogicResult :=
  mkResult@{
    -- nullifier of input resource or commitment of output resource
    tag : Field;
    is_consumed : Field;
    -- The merkle root of resources
    root : Field;
    cipher_text_elem0 : Field;
    cipher_text_elem1 : Field;
    cipher_text_elem2 : Field;
    cipher_text_elem3 : Field;
    cipher_text_elem4 : Field;
    cipher_text_elem5 : Field;
    cipher_text_elem6 : Field;
    cipher_text_elem7 : Field;
    cipher_text_elem8 : Field;
    cipher_text_elem9 : Field;
    mac : Field;
    pk_x : Field;
    pk_y : Field;
    nonce : Field;
  };

check_merkle (current_root : Field) : Pair Field Bool -> Field
  | (node, is_left) :=
    let
      pair :=
        if
          | is_left := node, current_root
          | else := current_root, node;

    in case pair of lhs, rhs := poseidonHash2 lhs rhs;

--- Check the merkle tree path validity and return the root
check_merkle_path (cur : Field) : List (Pair Field Bool) -> Field
  | [] := cur
  | (p :: ps) := check_merkle_path (check_merkle cur p) ps;

resource_commitment (resource : Resource) : Field :=
  let
    psi :=
      poseidonHashList
        [
          PRF_EXPAND_PERSONALIZATION_FELT;
          0;
          Resource.rand_seed resource;
          Resource.nonce resource;
        ];
    rcm :=
      poseidonHashList
        [
          PRF_EXPAND_PERSONALIZATION_FELT;
          1;
          Resource.rand_seed resource;
          Resource.nonce resource;
        ];
    eph_field : Field :=
      if
        | Resource.is_ephemeral resource := 1
        | else := 0;
  in poseidonHashList
    [
      Resource.logic_ref resource;
      Resource.label_ref resource;
      Resource.value_ref resource;
      Resource.nk_commitment resource;
      Resource.nonce resource;
      psi;
      Resource.quantity resource;
      eph_field;
      rcm;
    ];

resource_nullifier
  (nf_key : Field) (resource : Resource) (cm : Field) : Field :=
  let
    psi :=
      poseidonHashList
        [
          PRF_EXPAND_PERSONALIZATION_FELT;
          0;
          Resource.rand_seed resource;
          Resource.nonce resource;
        ];
  in poseidonHashList [nf_key; Resource.nonce resource; psi; cm];

type EncryptionResult :=
  mkEncryptionResult@{
    cipher_text_elem0 : Field;
    cipher_text_elem1 : Field;
    cipher_text_elem2 : Field;
    cipher_text_elem3 : Field;
    cipher_text_elem4 : Field;
    cipher_text_elem5 : Field;
    cipher_text_elem6 : Field;
    cipher_text_elem7 : Field;
    cipher_text_elem8 : Field;
    cipher_text_elem9 : Field;
    mac : Field;
    sender_pk_x : Field;
    sender_pk_y : Field;
    nonce : Field;
  };

type Cipher :=
  mkCipher@{
    cipher_text : List Field;
    cur_state : Field;
  };

update_poseidon_state
  (cur_msg secret_key_x : Field) (cipher : Cipher) : Cipher :=
  let
    new_state := Cipher.cur_state cipher + cur_msg;
    new_text := new_state :: Cipher.cipher_text cipher;
  in mkCipher@{
       cipher_text := new_text;
       cur_state := poseidonHash2 new_state secret_key_x;
     };

generate_cipher
  (poseidon_state : Field)
  (secret_key_x : Field)
  (plaintext : List Field)
  : Cipher :=
  let
    go (cipher : Cipher) : List Field -> Cipher
      | [] := cipher@Cipher{cipher_text := reverse (Cipher.cipher_text cipher)}
      | (m :: ms) := go (update_poseidon_state m secret_key_x cipher) ms;
  in go
    mkCipher@{
      cipher_text := [];
      cur_state := poseidon_state;
    }
    plaintext;

encryption
  (messages : List Field)
  (pk_x : Field)
  (pk_y : Field)
  (sk : Field)
  (nonce : Field)
  : EncryptionResult :=

  let
    -- Generate encryption key
    pk := Ec.mkPoint pk_x pk_y;
    secret_key := Ec.mul sk pk;

    -- PLAINTEXT_NUM := 10;

    -- TODO: Pad the messages here or outside of the circuit?
    plaintext := messages;

    -- Init poseidon state
    secret_key_x := Ec.Point.x secret_key;
    poseidon_state :=
      poseidonHashList [secret_key_x; Ec.Point.y secret_key; nonce; 10];

    -- Generate cipher
    final_cipher := generate_cipher poseidon_state secret_key_x plaintext;

    -- Get MAC
    mac := Cipher.cur_state final_cipher;

    -- Generate sender's pk
    generator := Ec.mkPoint Ec.StarkCurve.GEN_X Ec.StarkCurve.GEN_Y;
    sender_pk := Ec.mul sk generator;

  in case Cipher.cipher_text final_cipher of
       | [
           elem0;
           elem1;
           elem2;
           elem3;
           elem4;
           elem5;
           elem6;
           elem7;
           elem8;
           elem9;
         ] :=
         mkEncryptionResult@{
           cipher_text_elem0 := elem0;
           cipher_text_elem1 := elem1;
           cipher_text_elem2 := elem2;
           cipher_text_elem3 := elem3;
           cipher_text_elem4 := elem4;
           cipher_text_elem5 := elem5;
           cipher_text_elem6 := elem6;
           cipher_text_elem7 := elem7;
           cipher_text_elem8 := elem8;
           cipher_text_elem9 := elem9;
           mac;
           sender_pk_x := Ec.Point.x sender_pk;
           sender_pk_y := Ec.Point.y sender_pk;
           nonce;
         }
       | _ := mkEncryptionResult 0 0 0 0 0 0 0 0 0 0 0 0 0 0;

main
  (self_resource : Resource)
  (is_consumed : Bool)
  (resource_nf_key : Field)
  (merkle_path : List (Pair Field Bool))
  : LogicResult :=
  -- Generate the commitment of self_resource resource
  let
    resource_cm := resource_commitment self_resource;

    -- Generate the nullifier of self_resource resource
    resource_nullifier :=
      resource_nullifier resource_nf_key self_resource resource_cm;

    tag :=
      if
        | is_consumed := resource_nullifier
        | else := resource_cm;

    is_consumed_field :=
      if
        | is_consumed := 1
        | else := 0;

    root := check_merkle_path tag merkle_path;

    -- Encryption
    resource_eph_field : Field :=
      if
        | Resource.is_ephemeral self_resource := 1
        | else := 0;
    messages :=
      [
        Resource.logic_ref self_resource;
        Resource.label_ref self_resource;
        Resource.quantity self_resource;
        Resource.value_ref self_resource;
        resource_eph_field;
        Resource.nonce self_resource;
        Resource.nk_commitment self_resource;
        Resource.rand_seed self_resource;
        0;
        0;
      ];

    cihper := encryption messages Ec.StarkCurve.GEN_X Ec.StarkCurve.GEN_Y 1 1;
  in mkResult@{
       tag := tag;
       is_consumed := is_consumed_field;
       root := root;
       cipher_text_elem0 := EncryptionResult.cipher_text_elem0 cihper;
       cipher_text_elem1 := EncryptionResult.cipher_text_elem1 cihper;
       cipher_text_elem2 := EncryptionResult.cipher_text_elem2 cihper;
       cipher_text_elem3 := EncryptionResult.cipher_text_elem3 cihper;
       cipher_text_elem4 := EncryptionResult.cipher_text_elem4 cihper;
       cipher_text_elem5 := EncryptionResult.cipher_text_elem5 cihper;
       cipher_text_elem6 := EncryptionResult.cipher_text_elem6 cihper;
       cipher_text_elem7 := EncryptionResult.cipher_text_elem7 cihper;
       cipher_text_elem8 := EncryptionResult.cipher_text_elem8 cihper;
       cipher_text_elem9 := EncryptionResult.cipher_text_elem9 cihper;
       mac := EncryptionResult.mac cihper;
       pk_x := EncryptionResult.sender_pk_x cihper;
       pk_y := EncryptionResult.sender_pk_y cihper;
       nonce := EncryptionResult.nonce cihper;
     };
