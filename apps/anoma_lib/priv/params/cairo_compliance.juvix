module cairo_compliance;

import Stdlib.Prelude open;
import Stdlib.Cairo.Ec as Ec;
import Stdlib.Cairo.Poseidon open;
import Stdlib.Cairo.Pedersen open;

-- PRF_EXPAND_PERSONALIZATION_FELT is from cairo_prover/src/lib.rs/PRF_EXPAND_PERSONALIZATION_FELT
PRF_EXPAND_PERSONALIZATION_FELT : Field :=
  89564067232354163924078705540990330212;

type Resource :=
  mkResource@{
    logic_ref : Field;
    label_ref : Field;
    quantity : Field;
    value_ref : Field;
    is_ephemeral : Bool;
    nonce : Field;
    nk_commitment : Field;
    rand_seed : Field;
  };

type ComplianceResult :=
  mkResult@{
    -- The nullifier of input resource
    input_nullifier : Field;
    -- The commitment to the output resource
    output_cm : Field;
    -- The root of the resource commitment Merkle tree
    root : Field;
    -- Resource delta is used to reason about total quantities of different kinds of resources
    delta_x : Field;
    delta_y : Field;
    -- TODO: add resource logic_ref commitments (for functional privacy)
    -- input_logic_commitment:
    -- output_logic_commitment:
    input_logic_ref : Field;
    output_logic_ref : Field;
  };

check_merkle (current_root : Field) : Pair Field Bool -> Field
  | (node, is_left) :=
    let
      pair :=
        if
          | is_left := node, current_root
          | else := current_root, node;

    in case pair of lhs, rhs := poseidonHash2 lhs rhs;

--- Check the merkle tree path validity and return the root
check_merkle_path (cur : Field) : List (Pair Field Bool) -> Field
  | [] := cur
  | (p :: ps) := check_merkle_path (check_merkle cur p) ps;

resource_commitment (resource : Resource) : Field :=
  let
    psi :=
      poseidonHashList
        [
          PRF_EXPAND_PERSONALIZATION_FELT;
          0;
          Resource.rand_seed resource;
          Resource.nonce resource;
        ];
    rcm :=
      poseidonHashList
        [
          PRF_EXPAND_PERSONALIZATION_FELT;
          1;
          Resource.rand_seed resource;
          Resource.nonce resource;
        ];
    eph_field : Field :=
      if
        | Resource.is_ephemeral resource := 1
        | else := 0;
  in poseidonHashList
    [
      Resource.logic_ref resource;
      Resource.label_ref resource;
      Resource.value_ref resource;
      Resource.nk_commitment resource;
      Resource.nonce resource;
      psi;
      Resource.quantity resource;
      eph_field;
      rcm;
    ];

resource_nullifier
  (nf_key : Field) (resource : Resource) (cm : Field) : Field :=
  let
    psi :=
      poseidonHashList
        [
          PRF_EXPAND_PERSONALIZATION_FELT;
          0;
          Resource.rand_seed resource;
          Resource.nonce resource;
        ];
    input_nk_commitment : Field := poseidonHash2 nf_key 0;
  in assert (Resource.nk_commitment resource == input_nk_commitment)
    >-> poseidonHashList [nf_key; Resource.nonce resource; psi; cm];

delta_commitment
  (input : Resource) (output : Resource) (rcv : Field) : Ec.Point :=
  let
    blind_base := Ec.mkPoint Ec.StarkCurve.GEN_X Ec.StarkCurve.GEN_Y;
    input_kind :=
      pedersenHashToCurve (Resource.logic_ref input) (Resource.label_ref input);
    output_kind :=
      pedersenHashToCurve
        (Resource.logic_ref output)
        (Resource.label_ref output);
    d1 := Ec.mul (Resource.quantity input) input_kind;
    d2 := Ec.mul (Resource.quantity output) output_kind;
    d3 := Ec.mul rcv blind_base;
  in Ec.add (Ec.sub d1 d2) d3;

main
  (input output : Resource)
  (input_nf_key : Field)
  (merkle_path : List (Pair Field Bool))
  (rcv : Field)
  (eph_root : Field)
  : ComplianceResult :=

  -- Check the input resource commitment:
  let
    -- Generate the commitment of input resource
    input_cm := resource_commitment input;

    -- Generate the nullifier of input resource
    input_nullifier := resource_nullifier input_nf_key input input_cm;

    -- Generate the commitment of output resource
    output_cm := resource_commitment output;

    -- Check the Merkle path
    root :=
      if
        | Resource.is_ephemeral input := eph_root
        | else := check_merkle_path input_cm merkle_path;

    -- Compute the delta commitment
    delta := delta_commitment input output rcv;

  in mkResult@{
       -- The nullifier of input resource
       input_nullifier := input_nullifier;
       -- The commitment to the output resource
       output_cm := output_cm;
       -- The root of the resource commitment Merkle tree
       root := root;
       -- Resource delta is used to reason about total quantities of different kinds of resources
       delta_x := Ec.Point.x delta;
       delta_y := Ec.Point.y delta;
       -- TODO: compute resource logic_ref commitments instead of using the input/output logic_ref fields
       -- input_logic_commitment:
       -- output_logic_commitment:
       input_logic_ref := Resource.logic_ref input;
       output_logic_ref := Resource.logic_ref output;
     };
