
syntax = "proto3";

package Anoma.Protobuf;

import "nock/prove.proto";
import "nock/run.proto";
import "intents/list_intents.proto";
import "intents/add_intent.proto";
import "indexer/nullifiers.proto";
import "indexer/unrevealed_commits.proto";
import "indexer/commits.proto";
import "indexer/unspent_resources.proto";
import "mempool/add_transaction.proto";
import "indexer/blocks/get.proto";
import "indexer/blocks/latest.proto";
import "indexer/blocks/root.proto";
import "indexer/blocks/filter.proto";

service NockService {
  rpc Prove(Anoma.Protobuf.Nock.Prove.Request)
      returns (Anoma.Protobuf.Nock.Prove.Response) {}

  rpc Run(Anoma.Protobuf.Nock.Run.Request)
      returns (Anoma.Protobuf.Nock.Run.Response) {}
}

service IntentsService {
  rpc ListIntents(Anoma.Protobuf.Intents.List.Request)
      returns (Anoma.Protobuf.Intents.List.Response) {}

  rpc AddIntent(Anoma.Protobuf.Intents.Add.Request)
      returns (Anoma.Protobuf.Intents.Add.Response) {}
}

service IndexerService {
  rpc ListNullifiers(Anoma.Protobuf.Indexer.Nullifiers.Request)
      returns (Anoma.Protobuf.Indexer.Nullifiers.Response) {}

  rpc ListUnrevealedCommits(Anoma.Protobuf.Indexer.UnrevealedCommits.Request)
      returns (Anoma.Protobuf.Indexer.UnrevealedCommits.Response) {}

  rpc ListCommits(Anoma.Protobuf.Indexer.Commits.Request)
      returns (Anoma.Protobuf.Indexer.Commits.Response) {}

  rpc ListUnspentResources(Anoma.Protobuf.Indexer.UnspentResources.Request)
      returns (Anoma.Protobuf.Indexer.UnspentResources.Response) {}
}

service MempoolService {
  rpc Add(Anoma.Protobuf.Mempool.AddTransaction.Request)
      returns (Anoma.Protobuf.Mempool.AddTransaction.Response) {}
}

service BlockService {
  rpc Get(Anoma.Protobuf.Indexer.Blocks.Get.Request)
      returns (Anoma.Protobuf.Indexer.Blocks.Get.Response) {}

  rpc Latest(Anoma.Protobuf.Indexer.Blocks.Latest.Request)
      returns (Anoma.Protobuf.Indexer.Blocks.Latest.Response) {}

  rpc Root(Anoma.Protobuf.Indexer.Blocks.Root.Request)
      returns (Anoma.Protobuf.Indexer.Blocks.Root.Response) {}

  rpc Filter(Anoma.Protobuf.Indexer.Blocks.Filtered.Request)
      returns (Anoma.Protobuf.Indexer.Blocks.Filtered.Response) {}
}
