syntax = "proto3";

package Anoma.Proto;

import "advertisement.proto";
import "intents.proto";
import "intranode.proto";
import "mempool.proto";
import "nock.proto";
import "pubsub.proto";

/*
 The intents service allows adding intents to the intent pool,
 or retrieve all current intents in the intentpool.
 */
service IntentpoolService {
  rpc Add(Anoma.Proto.Intentpool.Add.Request)
      returns (Anoma.Proto.Intentpool.Add.Response) {}

  rpc List(Anoma.Proto.Intentpool.List.Request)
      returns (Anoma.Proto.Intentpool.List.Response) {}
}

/*
 The mempool service allows adding intents to the mempool.
 */
service MempoolService {
  rpc Add(Anoma.Proto.Mempool.Add.Request) returns (Anoma.Proto.Mempool.Add.Response) {}
}

/*
 The Nock service allows a user to make nock requests to the client.
*/
service NockService {
  rpc Prove(Anoma.Proto.Nock.Prove.Request)
      returns (Anoma.Proto.Nock.Prove.Response) {}

  rpc Run(Anoma.Proto.Nock.Run.Request)
      returns (Anoma.Proto.Nock.Run.Response) {}
}

/*
 Intranode sends messages between nodes' engines.
 This is a high level api for sending any message between any two engines.
 */
service IntraNodeService {
  rpc Call(Anoma.Proto.IntraNode.Call.Request)
      returns (Anoma.Proto.IntraNode.Call.Response) {}

  rpc Cast(Anoma.Proto.IntraNode.Cast.Request)
      returns (Anoma.Proto.IntraNode.Cast.Response) {}
}

/*
 The advertisement service is used to send advertisements from one node to
 another.
*/
service AdvertisementService {
  rpc Advertise(Anoma.Proto.Advertisement.Advertise.Request)
      returns (Anoma.Proto.Advertisement.Advertise.Response) {}
}

/*
 The PubSub service allows nodes to subscribe and unsubscribe to topics,
 as well as sending events to another node.
*/
service PubSubService {
  rpc Subscribe(Anoma.Proto.PubSub.Subscribe.Request)
      returns (Anoma.Proto.PubSub.Subscribe.Response) {}

  rpc Unsubscribe(Anoma.Proto.PubSub.Unsubscribe.Request)
      returns (Anoma.Proto.PubSub.Unsubscribe.Response) {}

  rpc Publish(Anoma.Proto.PubSub.Event.Request)
      returns (Anoma.Proto.PubSub.Event.Response) {}
}
